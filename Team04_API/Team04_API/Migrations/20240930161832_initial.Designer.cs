// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Team04_API.Data;

#nullable disable

namespace Team04_API.Migrations
{
    [DbContext(typeof(dataDbContext))]
    [Migration("20240930161832_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DepartmentTag", b =>
                {
                    b.Property<int>("Department_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Tag_ID")
                        .HasColumnType("integer");

                    b.HasKey("Department_ID", "Tag_ID");

                    b.HasIndex("Tag_ID");

                    b.ToTable("DepartmentTag");
                });

            modelBuilder.Entity("SoftwareUser", b =>
                {
                    b.Property<int>("Software_ID")
                        .HasColumnType("integer");

                    b.Property<Guid>("UsersUser_ID")
                        .HasColumnType("uuid");

                    b.HasKey("Software_ID", "UsersUser_ID");

                    b.HasIndex("UsersUser_ID");

                    b.ToTable("SoftwareUser");
                });

            modelBuilder.Entity("Team04_API.Models.Audit.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Team04_API.Models.Chatbot.Chatbot_Log", b =>
                {
                    b.Property<int>("Chatbot_Log_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Chatbot_Log_ID"));

                    b.Property<Guid?>("Agent_ID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatUUID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Client_ID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Conversation_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Conversation_Title")
                        .HasColumnType("text");

                    b.Property<int?>("Ticket_ID")
                        .HasColumnType("integer");

                    b.Property<bool>("isBotConcluded")
                        .HasColumnType("boolean");

                    b.Property<bool>("isBotHandedOver")
                        .HasColumnType("boolean");

                    b.Property<bool>("isDismissed")
                        .HasColumnType("boolean");

                    b.HasKey("Chatbot_Log_ID");

                    b.HasIndex("Client_ID");

                    b.HasIndex("Ticket_ID")
                        .IsUnique();

                    b.ToTable("Chatbot_Log");
                });

            modelBuilder.Entity("Team04_API.Models.Company.Company", b =>
                {
                    b.Property<int>("Company_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Company_ID"));

                    b.Property<string>("Company_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Location_ID")
                        .HasColumnType("integer");

                    b.HasKey("Company_ID");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Company_ID = 1,
                            Company_Name = "Mini",
                            Location_ID = 0
                        },
                        new
                        {
                            Company_ID = 2,
                            Company_Name = "Rolce Royce",
                            Location_ID = 0
                        });
                });

            modelBuilder.Entity("Team04_API.Models.Company.Company_Request", b =>
                {
                    b.Property<int>("Company_Request_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Company_Request_ID"));

                    b.Property<Guid>("Client_ID")
                        .HasColumnType("uuid");

                    b.Property<int?>("Company_ID")
                        .HasColumnType("integer");

                    b.Property<string>("Company_Name")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime>("Request_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.HasKey("Company_Request_ID");

                    b.HasIndex("Client_ID");

                    b.HasIndex("Company_ID");

                    b.ToTable("Company_Request");
                });

            modelBuilder.Entity("Team04_API.Models.Department.Department", b =>
                {
                    b.Property<int>("Department_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Department_ID"));

                    b.Property<string>("Department_Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Department_ID");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Department_ID = 1,
                            Department_Description = "Handles infrastructure related issues",
                            Department_Name = "Infrastructure"
                        },
                        new
                        {
                            Department_ID = 2,
                            Department_Description = "Handles connectivity related issues",
                            Department_Name = "Connectivity"
                        },
                        new
                        {
                            Department_ID = 3,
                            Department_Description = "Handles general support related issues",
                            Department_Name = "General Support"
                        });
                });

            modelBuilder.Entity("Team04_API.Models.Department.DepartmentLocation", b =>
                {
                    b.Property<int>("Department_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Location_ID")
                        .HasColumnType("integer");

                    b.HasKey("Department_ID", "Location_ID");

                    b.HasIndex("Location_ID");

                    b.ToTable("DepartmentLocation");
                });

            modelBuilder.Entity("Team04_API.Models.FAQ.FAQ", b =>
                {
                    b.Property<int>("FAQ_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FAQ_ID"));

                    b.Property<string>("FAQ_Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FAQ_Category_ID")
                        .HasColumnType("integer");

                    b.Property<string>("FAQ_Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("User_ID")
                        .HasColumnType("uuid");

                    b.HasKey("FAQ_ID");

                    b.HasIndex("FAQ_Category_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("FAQ", (string)null);
                });

            modelBuilder.Entity("Team04_API.Models.FAQ.FAQ_Category", b =>
                {
                    b.Property<int>("FAQ_Category_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FAQ_Category_ID"));

                    b.Property<string>("FAQ_Category_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FAQ_Category_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FAQ_Category_ID");

                    b.ToTable("FAQ_Category", (string)null);
                });

            modelBuilder.Entity("Team04_API.Models.Feedback.Client_Feedback", b =>
                {
                    b.Property<int>("Client_Feedback_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Client_Feedback_ID"));

                    b.Property<int?>("Chatbot_Log_ID")
                        .HasColumnType("integer");

                    b.Property<string>("Client_Feedback_Detail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("Client_ID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Feedback_Date_Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Ticket_ID")
                        .HasColumnType("integer");

                    b.HasKey("Client_Feedback_ID");

                    b.HasIndex("Chatbot_Log_ID")
                        .IsUnique();

                    b.HasIndex("Client_ID");

                    b.HasIndex("Ticket_ID")
                        .IsUnique();

                    b.ToTable("Client_Feedback");
                });

            modelBuilder.Entity("Team04_API.Models.Location.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State_ID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("State_ID");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Team04_API.Models.Location.Country", b =>
                {
                    b.Property<int>("Country_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Country_ID"));

                    b.Property<string>("Country_Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("SubRegion")
                        .HasColumnType("text");

                    b.Property<string>("iso3Code")
                        .HasColumnType("text");

                    b.Property<string>("native")
                        .HasColumnType("text");

                    b.Property<string>("phone_code")
                        .HasColumnType("text");

                    b.HasKey("Country_ID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Team04_API.Models.Location.Location", b =>
                {
                    b.Property<int>("Location_ID")
                        .HasColumnType("integer");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("City_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Company_ID")
                        .HasColumnType("integer");

                    b.Property<int?>("PostalCode")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Street_Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Location_ID");

                    b.HasIndex("CityId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Team04_API.Models.Location.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Country_ID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State_Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Country_ID");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Team04_API.Models.Report.EmployeeReport", b =>
                {
                    b.Property<int>("Report_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Report_ID"));

                    b.Property<Guid>("Employee_ID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("NextDueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Report_Date_Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Report_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Report_Interval_ID")
                        .HasColumnType("integer");

                    b.Property<string>("Report_Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Report_Type_ID")
                        .HasColumnType("integer");

                    b.HasKey("Report_ID");

                    b.HasIndex("Employee_ID");

                    b.HasIndex("Report_Interval_ID");

                    b.HasIndex("Report_Type_ID");

                    b.ToTable("employeeReports");
                });

            modelBuilder.Entity("Team04_API.Models.Report.Report_Interval", b =>
                {
                    b.Property<int>("Report_Interval_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Report_Interval_ID"));

                    b.Property<string>("Report_Interval_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Report_Interval_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Report_Interval_Value")
                        .HasColumnType("integer");

                    b.HasKey("Report_Interval_ID");

                    b.ToTable("Report_Interval");

                    b.HasData(
                        new
                        {
                            Report_Interval_ID = 1,
                            Report_Interval_Description = " Reports will be scheduled daily",
                            Report_Interval_Name = "Daily",
                            Report_Interval_Value = 1
                        },
                        new
                        {
                            Report_Interval_ID = 2,
                            Report_Interval_Description = " Reports will be scheduled weekly",
                            Report_Interval_Name = "Weekly",
                            Report_Interval_Value = 7
                        },
                        new
                        {
                            Report_Interval_ID = 3,
                            Report_Interval_Description = " Reports will be scheduled Bi-weekly",
                            Report_Interval_Name = "Bi-weekly",
                            Report_Interval_Value = 14
                        },
                        new
                        {
                            Report_Interval_ID = 4,
                            Report_Interval_Description = " Reports will be scheduled Monthly",
                            Report_Interval_Name = "Monthly",
                            Report_Interval_Value = 31
                        });
                });

            modelBuilder.Entity("Team04_API.Models.Report.Report_Type", b =>
                {
                    b.Property<int>("Report_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Report_Type_ID"));

                    b.Property<string>("Report_Type_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Report_Type_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Report_Type_ID");

                    b.ToTable("Report_Type");

                    b.HasData(
                        new
                        {
                            Report_Type_ID = 1,
                            Report_Type_Description = "This report lists all currently open tickets, providing insights into unresolved issues. It includes details such as Ticket ID, Ticket Description, Created Date, Assigned Employee, and Priority helping managers track outstanding tasks and allocate resources effectively.",
                            Report_Type_Name = "Open Tickets Reports"
                        },
                        new
                        {
                            Report_Type_ID = 2,
                            Report_Type_Description = "This report provides a monthly breakdown of ticket data, categorized by ticket statuses. It includes headings for Ticket ID, Ticket Description and relevant data for the ticket status. This helps in identifying trends and evaluating the efficiency of the support team over time.",
                            Report_Type_Name = "Ticket Status Summary Report"
                        });
                });

            modelBuilder.Entity("Team04_API.Models.Software.Software", b =>
                {
                    b.Property<int>("Software_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Software_ID"));

                    b.Property<string>("Software_Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Software_Name")
                        .HasColumnType("text");

                    b.HasKey("Software_ID");

                    b.ToTable("Software");
                });

            modelBuilder.Entity("Team04_API.Models.Software.Software_Request", b =>
                {
                    b.Property<int>("Software_Request_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Software_Request_ID"));

                    b.Property<Guid>("Client_ID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Request_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Software_ID")
                        .HasColumnType("integer");

                    b.HasKey("Software_Request_ID");

                    b.HasIndex("Client_ID");

                    b.HasIndex("Software_ID");

                    b.ToTable("Software_Request");
                });

            modelBuilder.Entity("Team04_API.Models.Software.Software_VDI", b =>
                {
                    b.Property<int>("Software_ID")
                        .HasColumnType("integer");

                    b.Property<int>("VDI_ID")
                        .HasColumnType("integer");

                    b.HasKey("Software_ID", "VDI_ID");

                    b.HasIndex("VDI_ID");

                    b.ToTable("Software_VDI");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.Anomaly", b =>
                {
                    b.Property<int>("Anomaly_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Anomaly_ID"));

                    b.Property<DateTime?>("Anomaly_DateTime_Started")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Anomaly_Description")
                        .HasColumnType("text");

                    b.Property<string>("Anomaly_Status")
                        .HasColumnType("text");

                    b.HasKey("Anomaly_ID");

                    b.ToTable("Anomaly");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.Priority", b =>
                {
                    b.Property<int>("Priority_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Priority_ID"));

                    b.Property<TimeSpan>("BreachTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("interval")
                        .HasDefaultValue(new TimeSpan(365, 0, 0, 0, 0));

                    b.Property<string>("Priority_Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Priority_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Priority_ID");

                    b.ToTable("Priority");

                    b.HasData(
                        new
                        {
                            Priority_ID = 1,
                            BreachTime = new TimeSpan(365, 0, 0, 0, 0),
                            Priority_Description = "Low priority",
                            Priority_Name = "Low"
                        },
                        new
                        {
                            Priority_ID = 2,
                            BreachTime = new TimeSpan(365, 0, 0, 0, 0),
                            Priority_Description = "Medium priority",
                            Priority_Name = "Medium"
                        },
                        new
                        {
                            Priority_ID = 3,
                            BreachTime = new TimeSpan(365, 0, 0, 0, 0),
                            Priority_Description = "High priority",
                            Priority_Name = "High"
                        });
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.Tag", b =>
                {
                    b.Property<int>("Tag_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Tag_ID"));

                    b.Property<int?>("Department_ID")
                        .HasColumnType("integer");

                    b.Property<string>("Tag_Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Tag_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Tag_ID");

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            Tag_ID = 1,
                            Department_ID = 1,
                            Tag_Description = "Infrastructure related issues",
                            Tag_Name = "Infrastructure"
                        },
                        new
                        {
                            Tag_ID = 2,
                            Department_ID = 1,
                            Tag_Description = "Connectivity related issues",
                            Tag_Name = "Connectivity"
                        },
                        new
                        {
                            Tag_ID = 3,
                            Department_ID = 1,
                            Tag_Description = "General support related issues",
                            Tag_Name = "General Support"
                        });
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.Ticket", b =>
                {
                    b.Property<int>("Ticket_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Ticket_ID"));

                    b.Property<int?>("Anomaly_ID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Assigned_Employee_ID")
                        .HasColumnType("uuid");

                    b.Property<int?>("Chatbot_Log_ID")
                        .HasColumnType("integer");

                    b.Property<int?>("Client_Feedback_ID")
                        .HasColumnType("integer");

                    b.Property<Guid>("Client_ID")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Tag_ID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Ticket_Date_Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Ticket_Date_Resolved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ticket_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Ticket_Status_ID")
                        .HasColumnType("integer");

                    b.Property<bool?>("Ticket_Subscription")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<bool>("isOpen")
                        .HasColumnType("boolean");

                    b.HasKey("Ticket_ID");

                    b.HasIndex("Anomaly_ID");

                    b.HasIndex("Assigned_Employee_ID");

                    b.HasIndex("Client_ID");

                    b.HasIndex("Priority_ID");

                    b.HasIndex("Tag_ID");

                    b.HasIndex("Ticket_Status_ID");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.TicketEscalation", b =>
                {
                    b.Property<int>("Escalation_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Escalation_ID"));

                    b.Property<DateTime>("Date_of_Escalation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasBeenEscalated")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("New_Employee_ID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Previous_Employee_ID")
                        .HasColumnType("uuid");

                    b.Property<string>("ReasonForEscalation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Ticket_ID")
                        .HasColumnType("integer");

                    b.HasKey("Escalation_ID");

                    b.HasIndex("New_Employee_ID");

                    b.HasIndex("Previous_Employee_ID");

                    b.HasIndex("Ticket_ID")
                        .IsUnique();

                    b.ToTable("TicketEscalation");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.TicketGroup", b =>
                {
                    b.Property<int>("TicketGroup_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TicketGroup_ID"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TicketGroup_ID");

                    b.ToTable("TicketGroup");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.TicketTicketGroup", b =>
                {
                    b.Property<int>("Ticket_ID")
                        .HasColumnType("integer");

                    b.Property<int>("TicketGroup_ID")
                        .HasColumnType("integer");

                    b.HasKey("Ticket_ID", "TicketGroup_ID");

                    b.HasIndex("TicketGroup_ID");

                    b.ToTable("ticketTicketGroups");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.Ticket_Status", b =>
                {
                    b.Property<int>("Ticket_Status_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Ticket_Status_ID"));

                    b.Property<string>("Status_Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Ticket_Status_ID");

                    b.ToTable("Ticket_Status");

                    b.HasData(
                        new
                        {
                            Ticket_Status_ID = 1,
                            Status_Description = "Ticket is open",
                            Status_Name = "Open"
                        },
                        new
                        {
                            Ticket_Status_ID = 2,
                            Status_Description = "Ticket is being worked on",
                            Status_Name = "In Progress"
                        },
                        new
                        {
                            Ticket_Status_ID = 3,
                            Status_Description = "Ticket is closed",
                            Status_Name = "Closed"
                        },
                        new
                        {
                            Ticket_Status_ID = 4,
                            Status_Description = "Ticket has been re-opened",
                            Status_Name = "Reopened"
                        },
                        new
                        {
                            Ticket_Status_ID = 5,
                            Status_Description = "Ticket has been breached",
                            Status_Name = "Breached"
                        });
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.Ticket_Updates", b =>
                {
                    b.Property<int>("Ticket_Update_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Ticket_Update_ID"));

                    b.Property<DateTime>("DateOfChange")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Ticket_ID")
                        .HasColumnType("integer");

                    b.Property<int?>("Ticket_Status_New_ID")
                        .HasColumnType("integer");

                    b.Property<int?>("Ticket_Status_Old_ID")
                        .HasColumnType("integer");

                    b.Property<bool>("hasBeenDismissed")
                        .HasColumnType("boolean");

                    b.HasKey("Ticket_Update_ID");

                    b.HasIndex("Ticket_ID");

                    b.HasIndex("Ticket_Status_New_ID");

                    b.ToTable("Ticket_Updates");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.To_do_List.To_do_List", b =>
                {
                    b.Property<int>("To_do_List_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("To_do_List_ID"));

                    b.Property<bool>("Is_Completed")
                        .HasColumnType("boolean");

                    b.Property<string>("Item_Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Ticket_ID")
                        .HasColumnType("integer");

                    b.HasKey("To_do_List_ID");

                    b.HasIndex("Ticket_ID");

                    b.ToTable("To_do_List");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.To_do_List.To_do_List_Items", b =>
                {
                    b.Property<int>("To_Do_Note_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("To_Do_Note_ID"));

                    b.Property<string>("Note_Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Ticket_ID")
                        .HasColumnType("integer");

                    b.HasKey("To_Do_Note_ID");

                    b.HasIndex("Ticket_ID");

                    b.ToTable("To_do_List_Items");
                });

            modelBuilder.Entity("Team04_API.Models.Users.Account_Requests.OTP", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("pin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("userID")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("OTP");
                });

            modelBuilder.Entity("Team04_API.Models.Users.Account_Requests.Request_Type", b =>
                {
                    b.Property<int>("Request_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Request_Type_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Request_Type_ID");

                    b.ToTable("Request_Type");

                    b.HasData(
                        new
                        {
                            Request_Type_ID = 1,
                            Description = "New Acount"
                        },
                        new
                        {
                            Request_Type_ID = 2,
                            Description = "Delete Account"
                        });
                });

            modelBuilder.Entity("Team04_API.Models.Users.Account_Requests.User_Account_Requests", b =>
                {
                    b.Property<int>("Request_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Request_ID"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Request_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Request_Type_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Role_ID")
                        .HasColumnType("integer");

                    b.Property<Guid>("User_ID")
                        .HasColumnType("uuid");

                    b.HasKey("Request_ID");

                    b.HasIndex("Request_Type_ID");

                    b.HasIndex("Role_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("User_Account_Requests");
                });

            modelBuilder.Entity("Team04_API.Models.Users.Credential", b =>
                {
                    b.Property<Guid>("Credential_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Otp")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Security_Answer")
                        .HasColumnType("text");

                    b.Property<Guid>("User_ID")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Credential_ID");

                    b.HasIndex("User_ID")
                        .IsUnique();

                    b.ToTable("Credential");

                    b.HasData(
                        new
                        {
                            Credential_ID = new Guid("aeb5df83-20ea-42a2-a9bb-d6901d466312"),
                            Password = "XAd24P75cXfVDvyN8uB8eA==;TtNcVixk0ldLs4ZEx5RQAn9aNvGbgD5hhjI29LxZtcM=",
                            User_ID = new Guid("aeb5df83-20ea-42a2-a9bb-d6901d466312"),
                            Username = "tiyiselani@duck.com"
                        },
                        new
                        {
                            Credential_ID = new Guid("8bbb3c8a-041e-4bac-8874-f0c5b5785540"),
                            Password = "JNy7krGpmezH/YcOE6MY6w==;9Msvw8lxFOtbjzcVkIK2OyjP7EyID3Du3FU5AAgVz8c=",
                            User_ID = new Guid("0fd2cb56-1a32-40a9-8f92-10f72dce0e52"),
                            Username = "iqguest@gmail.com"
                        },
                        new
                        {
                            Credential_ID = new Guid("9d66d7c0-86c1-437c-9cb4-45704de68597"),
                            Password = "bptNJ3orpX0znUx3LsXadw==;qXZQzJ0HUK8ukVQwK+C/Z52jaDzvtx304kcK7Q7M3nk=",
                            User_ID = new Guid("17b26952-20d4-4765-afc8-f930c77f210a"),
                            Username = "iqclient@gmail.com"
                        },
                        new
                        {
                            Credential_ID = new Guid("c26d6afd-2551-4580-b823-0813ced69c66"),
                            Password = "7Mh49OpV9aZad1kjS6iQuw==;S1wZaQtOl7Xeq2Rzbld6UJtO6cRAiFKjyAQzDBjzVx8=",
                            User_ID = new Guid("401b3bf7-3455-463f-a4ea-8915e1d08812"),
                            Username = "iqemployee@gmail.com"
                        },
                        new
                        {
                            Credential_ID = new Guid("db67e15b-c794-403e-b4e8-cdf0ab9d75c6"),
                            Password = "s5ve0UXhZ2XU8FLV/863Og==;a3S93Im45LYpumyCZK83zgtgS2Z4WKY0bTLSC3IfcvQ=",
                            User_ID = new Guid("4d21fc01-68d3-41c1-ba92-3ff32d56873b"),
                            Username = "iqadmin@gmail.com"
                        },
                        new
                        {
                            Credential_ID = new Guid("eb8ea636-2249-41dc-bd81-8f2e520650e2"),
                            Password = "rLqMvRB/VQQZ3TOegUJCoQ==;cQYyTBlDGuoTE89XTAZUKV38vwTwr7enxAfBymJk5pI=",
                            User_ID = new Guid("75f7fb8d-f2b8-4467-9211-d41eafac411b"),
                            Username = "iqsadmin@gmail.com"
                        });
                });

            modelBuilder.Entity("Team04_API.Models.Users.Language", b =>
                {
                    b.Property<int>("Language_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Language_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Language_ID");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Language_ID = 1,
                            Description = "English"
                        },
                        new
                        {
                            Language_ID = 2,
                            Description = "Afrikaans"
                        },
                        new
                        {
                            Language_ID = 3,
                            Description = "German"
                        },
                        new
                        {
                            Language_ID = 4,
                            Description = "Xhosa"
                        },
                        new
                        {
                            Language_ID = 5,
                            Description = "Venda"
                        });
                });

            modelBuilder.Entity("Team04_API.Models.Users.Login_Status", b =>
                {
                    b.Property<int>("Login_Status_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Login_Status_ID"));

                    b.Property<string>("Login_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Login_Status_ID");

                    b.ToTable("Login_Status");

                    b.HasData(
                        new
                        {
                            Login_Status_ID = 1,
                            Login_Description = "Logged in"
                        },
                        new
                        {
                            Login_Status_ID = 2,
                            Login_Description = "Logged out"
                        });
                });

            modelBuilder.Entity("Team04_API.Models.Users.Role.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Guest",
                            Role_Description = "Basic rights role granted to new user accounts"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Client",
                            Role_Description = "Clients who have access to our proprietary chatbot and our VDI services"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Employee",
                            Role_Description = "Basic rights role granted to employees to handle tickets and support issues"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Admin",
                            Role_Description = "Second highest access role for reserved personnel who oversee the activities of other employees"
                        },
                        new
                        {
                            Id = 5,
                            Name = "SuperAdmin",
                            Role_Description = "Highest level of access, oversee the activities of Administrators"
                        });
                });

            modelBuilder.Entity("Team04_API.Models.Users.Title", b =>
                {
                    b.Property<int>("Title_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Title_ID"));

                    b.Property<string>("Title_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Title_ID");

                    b.ToTable("Title");

                    b.HasData(
                        new
                        {
                            Title_ID = 1,
                            Title_Description = "Mr"
                        },
                        new
                        {
                            Title_ID = 2,
                            Title_Description = "Mrs"
                        },
                        new
                        {
                            Title_ID = 3,
                            Title_Description = "Ms"
                        },
                        new
                        {
                            Title_ID = 4,
                            Title_Description = "Miss"
                        },
                        new
                        {
                            Title_ID = 5,
                            Title_Description = "Dr"
                        },
                        new
                        {
                            Title_ID = 6,
                            Title_Description = "Prof"
                        });
                });

            modelBuilder.Entity("Team04_API.Models.Users.User", b =>
                {
                    b.Property<Guid>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Company_ID")
                        .HasColumnType("integer");

                    b.Property<Guid>("Credential_ID")
                        .HasColumnType("uuid");

                    b.Property<int?>("Department_ID")
                        .HasColumnType("integer");

                    b.Property<int?>("Language_ID")
                        .HasColumnType("integer");

                    b.Property<int?>("Login_Status_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Role_ID")
                        .HasColumnType("integer");

                    b.Property<int?>("Title_ID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("User_DOB")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("User_LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User_Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("isHod")
                        .HasColumnType("boolean");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("profile_icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("User_ID");

                    b.HasIndex("Company_ID");

                    b.HasIndex("Department_ID");

                    b.HasIndex("Language_ID");

                    b.HasIndex("Login_Status_ID");

                    b.HasIndex("Role_ID");

                    b.HasIndex("Title_ID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            User_ID = new Guid("3ae82869-0cf6-4231-8a7b-3f52f933e251"),
                            Credential_ID = new Guid("e991c15a-54b2-4968-9570-b863af79ebe9"),
                            Department_ID = 1,
                            Language_ID = 2,
                            Login_Status_ID = 1,
                            Role_ID = 5,
                            Title_ID = 1,
                            User_DOB = new DateTime(2001, 3, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2024, 8, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7218),
                            User_Name = "Rico",
                            User_Surname = "Mentz",
                            email = "ricomentz@example.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("d698b5d7-f393-4a0e-8b9d-918ee092a8cb"),
                            Credential_ID = new Guid("f92a60ac-e881-4cbd-accb-472be138be8c"),
                            Department_ID = 1,
                            Language_ID = 2,
                            Login_Status_ID = 2,
                            Role_ID = 1,
                            Title_ID = 2,
                            User_DOB = new DateTime(1987, 5, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2024, 7, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7231),
                            User_Name = "Alexander",
                            User_Surname = "Brown",
                            email = "alexander.brown@example.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("379049e3-bd53-4728-84eb-9272b7cb8a2a"),
                            Credential_ID = new Guid("4c88e07a-7e86-4648-a942-25acd64b3d54"),
                            Department_ID = 1,
                            Language_ID = 3,
                            Login_Status_ID = 1,
                            Role_ID = 3,
                            Title_ID = 3,
                            User_DOB = new DateTime(1984, 9, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2024, 6, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7242),
                            User_Name = "Sophia",
                            User_Surname = "Miller",
                            email = "sophia.miller@example.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("c528dbdd-a79c-4485-929a-4e48f26ec2aa"),
                            Credential_ID = new Guid("e5113098-4c89-4a52-80a8-4eb4842bf15d"),
                            Department_ID = 1,
                            Language_ID = 1,
                            Login_Status_ID = 2,
                            Role_ID = 3,
                            Title_ID = 2,
                            User_DOB = new DateTime(1989, 11, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2024, 5, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7245),
                            User_Name = "William",
                            User_Surname = "Davis",
                            email = "william.davis@example.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("ffd75dcb-544a-413d-9339-bf191c6f12cb"),
                            Credential_ID = new Guid("590b62d1-1235-43b2-9a38-dffe55e394ee"),
                            Department_ID = 1,
                            Language_ID = 2,
                            Login_Status_ID = 1,
                            Role_ID = 1,
                            Title_ID = 3,
                            User_DOB = new DateTime(1986, 7, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2024, 4, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7251),
                            User_Name = "Isabella",
                            User_Surname = "Wilson",
                            email = "isabella.wilson@example.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("f034a712-9788-4137-a748-dc026c07adaa"),
                            Credential_ID = new Guid("7ea62e1e-4599-47a5-ae10-2183a11849cb"),
                            Department_ID = 1,
                            Language_ID = 3,
                            Login_Status_ID = 2,
                            Role_ID = 1,
                            Title_ID = 1,
                            User_DOB = new DateTime(1983, 4, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2024, 3, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7254),
                            User_Name = "Ethan",
                            User_Surname = "Taylor",
                            email = "ethan.taylor@example.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("125afbf7-72ec-4ad3-b784-0e72b260d7ed"),
                            Credential_ID = new Guid("0fe1d4ea-3c34-48a4-ab14-69524ab0d055"),
                            Department_ID = 1,
                            Language_ID = 1,
                            Login_Status_ID = 1,
                            Role_ID = 1,
                            Title_ID = 2,
                            User_DOB = new DateTime(1988, 1, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2024, 2, 29, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7257),
                            User_Name = "Olivia",
                            User_Surname = "Martinez",
                            email = "olivia.martinez@example.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("2ea64422-cf1d-4c68-817d-df6a706b77b3"),
                            Credential_ID = new Guid("85f9db40-a25f-4e28-bd8e-a29f13971932"),
                            Department_ID = 1,
                            Language_ID = 2,
                            Login_Status_ID = 2,
                            Role_ID = 1,
                            Title_ID = 3,
                            User_DOB = new DateTime(1992, 10, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2024, 1, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7260),
                            User_Name = "Liam",
                            User_Surname = "Garcia",
                            email = "liam.garcia@example.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("83906aff-1532-44b4-8ce0-fa2065d670a5"),
                            Credential_ID = new Guid("0d1074a8-05b3-4602-b824-bd94c1b17c86"),
                            Department_ID = 1,
                            Language_ID = 3,
                            Login_Status_ID = 1,
                            Role_ID = 1,
                            Title_ID = 1,
                            User_DOB = new DateTime(1991, 12, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2023, 12, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7265),
                            User_Name = "Ava",
                            User_Surname = "Rodriguez",
                            email = "ava.rodriguez@example.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("98fac29e-8040-47f5-912e-e9217d78fbe8"),
                            Credential_ID = new Guid("69eb3b54-f3ed-48ac-a494-0e90ce1a8cd1"),
                            Department_ID = 1,
                            Language_ID = 1,
                            Login_Status_ID = 2,
                            Role_ID = 1,
                            Title_ID = 2,
                            User_DOB = new DateTime(1987, 8, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2023, 11, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7269),
                            User_Name = "Noah",
                            User_Surname = "Lopez",
                            email = "noah.lopez@example.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("6b8dd43e-5718-4751-b0f5-b6b625116430"),
                            Credential_ID = new Guid("7b344d78-11d8-432b-9a17-2101116e9eb7"),
                            Department_ID = 1,
                            Language_ID = 1,
                            Login_Status_ID = 1,
                            Role_ID = 1,
                            Title_ID = 1,
                            User_DOB = new DateTime(2003, 3, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2023, 12, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7272),
                            User_Name = "Connor",
                            User_Surname = "Kruger",
                            email = "connorguest@gmail.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("aeb5df83-20ea-42a2-a9bb-d6901d466312"),
                            Credential_ID = new Guid("2bfc5dbd-92e0-4494-80f2-24d94db41629"),
                            Department_ID = 1,
                            Language_ID = 1,
                            Login_Status_ID = 1,
                            Role_ID = 5,
                            Title_ID = 1,
                            User_DOB = new DateTime(2004, 6, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2023, 12, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7284),
                            User_Name = "Morris",
                            User_Surname = "Mofamadi",
                            email = "tiyiselani@duck.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("0fd2cb56-1a32-40a9-8f92-10f72dce0e52"),
                            Credential_ID = new Guid("8bbb3c8a-041e-4bac-8874-f0c5b5785540"),
                            Department_ID = 1,
                            Language_ID = 1,
                            Login_Status_ID = 1,
                            Role_ID = 1,
                            Title_ID = 1,
                            User_DOB = new DateTime(2003, 3, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2023, 12, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7288),
                            User_Name = "Informatics",
                            User_Surname = "Quintet",
                            email = "iqguest@gmail.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("17b26952-20d4-4765-afc8-f930c77f210a"),
                            Credential_ID = new Guid("9d66d7c0-86c1-437c-9cb4-45704de68597"),
                            Department_ID = 1,
                            Language_ID = 1,
                            Login_Status_ID = 1,
                            Role_ID = 2,
                            Title_ID = 1,
                            User_DOB = new DateTime(2003, 3, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2023, 12, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7291),
                            User_Name = "Informatics",
                            User_Surname = "Quintet",
                            email = "iqclient@gmail.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("401b3bf7-3455-463f-a4ea-8915e1d08812"),
                            Credential_ID = new Guid("c26d6afd-2551-4580-b823-0813ced69c66"),
                            Department_ID = 1,
                            Language_ID = 1,
                            Login_Status_ID = 1,
                            Role_ID = 3,
                            Title_ID = 1,
                            User_DOB = new DateTime(2003, 3, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2023, 12, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7294),
                            User_Name = "Informatics",
                            User_Surname = "Quintet",
                            email = "iqemployee@gmail.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("4d21fc01-68d3-41c1-ba92-3ff32d56873b"),
                            Credential_ID = new Guid("db67e15b-c794-403e-b4e8-cdf0ab9d75c6"),
                            Department_ID = 1,
                            Language_ID = 1,
                            Login_Status_ID = 1,
                            Role_ID = 4,
                            Title_ID = 1,
                            User_DOB = new DateTime(2003, 3, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2023, 12, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7298),
                            User_Name = "Informatics",
                            User_Surname = "Quintet",
                            email = "iqadmin@gmail.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        },
                        new
                        {
                            User_ID = new Guid("75f7fb8d-f2b8-4467-9211-d41eafac411b"),
                            Credential_ID = new Guid("eb8ea636-2249-41dc-bd81-8f2e520650e2"),
                            Department_ID = 1,
                            Language_ID = 1,
                            Login_Status_ID = 1,
                            Role_ID = 5,
                            Title_ID = 1,
                            User_DOB = new DateTime(2003, 3, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            User_LastLogin = new DateTime(2023, 12, 30, 16, 18, 31, 700, DateTimeKind.Utc).AddTicks(7301),
                            User_Name = "Informatics",
                            User_Surname = "Quintet",
                            email = "iqsadmin@gmail.com",
                            isActive = true,
                            isHod = false,
                            phone = "",
                            profile_icon = ""
                        });
                });

            modelBuilder.Entity("Team04_API.Models.VDI.Client_VDI", b =>
                {
                    b.Property<Guid>("Client_ID")
                        .HasColumnType("uuid");

                    b.Property<int>("VDI_ID")
                        .HasColumnType("integer");

                    b.HasKey("Client_ID", "VDI_ID");

                    b.HasIndex("VDI_ID");

                    b.ToTable("Client_VDI");
                });

            modelBuilder.Entity("Team04_API.Models.VDI.VDI", b =>
                {
                    b.Property<int>("VDI_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VDI_ID"));

                    b.Property<string>("VDI_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("VDI_Type_ID")
                        .HasColumnType("integer");

                    b.HasKey("VDI_ID");

                    b.HasIndex("VDI_Type_ID");

                    b.ToTable("VDI");
                });

            modelBuilder.Entity("Team04_API.Models.VDI.VDI_Request", b =>
                {
                    b.Property<int>("VDI_Request_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VDI_Request_ID"));

                    b.Property<Guid>("Client_ID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Request_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VDI_ID")
                        .HasColumnType("integer");

                    b.HasKey("VDI_Request_ID");

                    b.HasIndex("Client_ID");

                    b.HasIndex("VDI_ID");

                    b.ToTable("VDI_Request");
                });

            modelBuilder.Entity("Team04_API.Models.VDI.VDI_Type", b =>
                {
                    b.Property<int>("VDI_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VDI_Type_ID"));

                    b.Property<string>("VDI_Type_Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("VDI_Type_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("VDI_Type_ID");

                    b.ToTable("VDI_Type");
                });

            modelBuilder.Entity("DepartmentTag", b =>
                {
                    b.HasOne("Team04_API.Models.Department.Department", null)
                        .WithMany()
                        .HasForeignKey("Department_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Ticket.Tag", null)
                        .WithMany()
                        .HasForeignKey("Tag_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoftwareUser", b =>
                {
                    b.HasOne("Team04_API.Models.Software.Software", null)
                        .WithMany()
                        .HasForeignKey("Software_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUser_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Team04_API.Models.Chatbot.Chatbot_Log", b =>
                {
                    b.HasOne("Team04_API.Models.Users.User", "Client")
                        .WithMany()
                        .HasForeignKey("Client_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Team04_API.Models.Ticket.Ticket", "Ticket")
                        .WithOne("Chatbot_Log")
                        .HasForeignKey("Team04_API.Models.Chatbot.Chatbot_Log", "Ticket_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("Team04_API.Models.Chatbot.Chat", "chat", b1 =>
                        {
                            b1.Property<int>("Chatbot_Log_ID")
                                .HasColumnType("integer");

                            b1.Property<int>("Chat_ID")
                                .HasColumnType("integer");

                            b1.HasKey("Chatbot_Log_ID");

                            b1.ToTable("Chatbot_Log");

                            b1.ToJson("chat");

                            b1.WithOwner()
                                .HasForeignKey("Chatbot_Log_ID");

                            b1.OwnsMany("Team04_API.Models.Chatbot.Message", "Messages", b2 =>
                                {
                                    b2.Property<int>("Chatbot_Log_ID")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("messageText")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<int>("messageType")
                                        .HasColumnType("integer");

                                    b2.Property<string>("name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<int>("role")
                                        .HasColumnType("integer");

                                    b2.Property<Guid?>("senderID")
                                        .HasColumnType("uuid");

                                    b2.Property<DateTime?>("time")
                                        .HasColumnType("timestamp with time zone");

                                    b2.HasKey("Chatbot_Log_ID", "Id");

                                    b2.ToTable("Chatbot_Log");

                                    b2.WithOwner()
                                        .HasForeignKey("Chatbot_Log_ID");
                                });

                            b1.Navigation("Messages");
                        });

                    b.Navigation("Client");

                    b.Navigation("Ticket");

                    b.Navigation("chat");
                });

            modelBuilder.Entity("Team04_API.Models.Company.Company_Request", b =>
                {
                    b.HasOne("Team04_API.Models.Users.User", "Client")
                        .WithMany()
                        .HasForeignKey("Client_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Company.Company", "Company")
                        .WithMany()
                        .HasForeignKey("Company_ID");

                    b.Navigation("Client");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Team04_API.Models.Department.DepartmentLocation", b =>
                {
                    b.HasOne("Team04_API.Models.Department.Department", "Department")
                        .WithMany()
                        .HasForeignKey("Department_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Location.Location", "Location")
                        .WithMany()
                        .HasForeignKey("Location_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Team04_API.Models.FAQ.FAQ", b =>
                {
                    b.HasOne("Team04_API.Models.FAQ.FAQ_Category", "FAQ_Category")
                        .WithMany("FAQs")
                        .HasForeignKey("FAQ_Category_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Users.User", "User")
                        .WithMany("FAQs")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("FAQ_Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Team04_API.Models.Feedback.Client_Feedback", b =>
                {
                    b.HasOne("Team04_API.Models.Chatbot.Chatbot_Log", "Chatbot_Log")
                        .WithOne("Client_Feedback")
                        .HasForeignKey("Team04_API.Models.Feedback.Client_Feedback", "Chatbot_Log_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Team04_API.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("Client_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Ticket.Ticket", "Ticket")
                        .WithOne("ClientFeedback")
                        .HasForeignKey("Team04_API.Models.Feedback.Client_Feedback", "Ticket_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Chatbot_Log");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Team04_API.Models.Location.City", b =>
                {
                    b.HasOne("Team04_API.Models.Location.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("State_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Team04_API.Models.Location.Location", b =>
                {
                    b.HasOne("Team04_API.Models.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Team04_API.Models.Company.Company", "Company")
                        .WithOne("Location")
                        .HasForeignKey("Team04_API.Models.Location.Location", "Location_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Team04_API.Models.Location.State", b =>
                {
                    b.HasOne("Team04_API.Models.Location.Country", "Country")
                        .WithMany("states")
                        .HasForeignKey("Country_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Team04_API.Models.Report.EmployeeReport", b =>
                {
                    b.HasOne("Team04_API.Models.Users.User", "Employee")
                        .WithMany("EmployeeReports")
                        .HasForeignKey("Employee_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Report.Report_Interval", "Report_Interval")
                        .WithMany("EmployeeReports")
                        .HasForeignKey("Report_Interval_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Report.Report_Type", "Report_Type")
                        .WithMany("EmployeeReports")
                        .HasForeignKey("Report_Type_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Report_Interval");

                    b.Navigation("Report_Type");
                });

            modelBuilder.Entity("Team04_API.Models.Software.Software_Request", b =>
                {
                    b.HasOne("Team04_API.Models.Users.User", "Client")
                        .WithMany()
                        .HasForeignKey("Client_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Software.Software", "Software")
                        .WithMany("Software_Requests")
                        .HasForeignKey("Software_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Team04_API.Models.Software.Software_VDI", b =>
                {
                    b.HasOne("Team04_API.Models.Software.Software", "Software")
                        .WithMany()
                        .HasForeignKey("Software_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.VDI.VDI", "VDI")
                        .WithMany()
                        .HasForeignKey("VDI_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Software");

                    b.Navigation("VDI");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.Anomaly", b =>
                {
                    b.OwnsMany("Team04_API.Models.Ticket.AnomalyReport", "anomalyReports", b1 =>
                        {
                            b1.Property<int>("Anomaly_ID")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<int>("TagID")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("last_submission_time")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("submission_count")
                                .HasColumnType("integer");

                            b1.HasKey("Anomaly_ID", "Id");

                            b1.ToTable("Anomaly");

                            b1.ToJson("anomalyReports");

                            b1.WithOwner()
                                .HasForeignKey("Anomaly_ID");
                        });

                    b.OwnsOne("Team04_API.Models.Ticket.IntervalRecord", "IntervalRecord", b1 =>
                        {
                            b1.Property<int>("Anomaly_ID")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("interval_end")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("interval_start")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<float>("record_count")
                                .HasColumnType("real");

                            b1.HasKey("Anomaly_ID");

                            b1.ToTable("Anomaly");

                            b1.ToJson("IntervalRecord");

                            b1.WithOwner()
                                .HasForeignKey("Anomaly_ID");
                        });

                    b.Navigation("IntervalRecord")
                        .IsRequired();

                    b.Navigation("anomalyReports");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.Ticket", b =>
                {
                    b.HasOne("Team04_API.Models.Ticket.Anomaly", "Anomaly")
                        .WithMany("Ticket")
                        .HasForeignKey("Anomaly_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Team04_API.Models.Users.User", "Employee")
                        .WithMany()
                        .HasForeignKey("Assigned_Employee_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Team04_API.Models.Users.User", "Client")
                        .WithMany()
                        .HasForeignKey("Client_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Ticket.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("Priority_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Ticket.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("Tag_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Ticket.Ticket_Status", "Ticket_Status")
                        .WithMany()
                        .HasForeignKey("Ticket_Status_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Anomaly");

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("Priority");

                    b.Navigation("Tag");

                    b.Navigation("Ticket_Status");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.TicketEscalation", b =>
                {
                    b.HasOne("Team04_API.Models.Users.User", "NewEmployee")
                        .WithMany()
                        .HasForeignKey("New_Employee_ID");

                    b.HasOne("Team04_API.Models.Users.User", "PreviousEmployee")
                        .WithMany()
                        .HasForeignKey("Previous_Employee_ID");

                    b.HasOne("Team04_API.Models.Ticket.Ticket", "Ticket")
                        .WithOne("Ticket_Escalation")
                        .HasForeignKey("Team04_API.Models.Ticket.TicketEscalation", "Ticket_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewEmployee");

                    b.Navigation("PreviousEmployee");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.TicketTicketGroup", b =>
                {
                    b.HasOne("Team04_API.Models.Ticket.TicketGroup", "TicketGroup")
                        .WithMany()
                        .HasForeignKey("TicketGroup_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Ticket.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("Ticket_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("TicketGroup");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.Ticket_Updates", b =>
                {
                    b.HasOne("Team04_API.Models.Ticket.Ticket", "ticket")
                        .WithMany("Ticket_Updates")
                        .HasForeignKey("Ticket_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Ticket.Ticket_Status", "ticket_status")
                        .WithMany()
                        .HasForeignKey("Ticket_Status_New_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ticket");

                    b.Navigation("ticket_status");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.To_do_List.To_do_List", b =>
                {
                    b.HasOne("Team04_API.Models.Ticket.Ticket", "Ticket")
                        .WithMany("ToDoLists")
                        .HasForeignKey("Ticket_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.To_do_List.To_do_List_Items", b =>
                {
                    b.HasOne("Team04_API.Models.Ticket.Ticket", "Ticket")
                        .WithMany("ToDoListItems")
                        .HasForeignKey("Ticket_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Team04_API.Models.Users.Account_Requests.OTP", b =>
                {
                    b.HasOne("Team04_API.Models.Users.Credential", "userC")
                        .WithOne("uOTP")
                        .HasForeignKey("Team04_API.Models.Users.Account_Requests.OTP", "userID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("userC");
                });

            modelBuilder.Entity("Team04_API.Models.Users.Account_Requests.User_Account_Requests", b =>
                {
                    b.HasOne("Team04_API.Models.Users.Account_Requests.Request_Type", "request_type")
                        .WithMany()
                        .HasForeignKey("Request_Type_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Users.Role.Role", "Role")
                        .WithMany()
                        .HasForeignKey("Role_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Users.User", "user")
                        .WithMany()
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("request_type");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Team04_API.Models.Users.Credential", b =>
                {
                    b.HasOne("Team04_API.Models.Users.User", "User")
                        .WithOne("Credential")
                        .HasForeignKey("Team04_API.Models.Users.Credential", "User_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Team04_API.Models.Users.User", b =>
                {
                    b.HasOne("Team04_API.Models.Company.Company", null)
                        .WithMany("Clients")
                        .HasForeignKey("Company_ID");

                    b.HasOne("Team04_API.Models.Department.Department", "Department")
                        .WithMany()
                        .HasForeignKey("Department_ID");

                    b.HasOne("Team04_API.Models.Users.Language", "language")
                        .WithMany("Users")
                        .HasForeignKey("Language_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Team04_API.Models.Users.Login_Status", "_status")
                        .WithMany("Users")
                        .HasForeignKey("Login_Status_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Team04_API.Models.Users.Role.Role", "role")
                        .WithMany()
                        .HasForeignKey("Role_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.Users.Title", "title")
                        .WithMany("Users")
                        .HasForeignKey("Title_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("_status");

                    b.Navigation("language");

                    b.Navigation("role");

                    b.Navigation("title");
                });

            modelBuilder.Entity("Team04_API.Models.VDI.Client_VDI", b =>
                {
                    b.HasOne("Team04_API.Models.Users.User", "Client")
                        .WithMany()
                        .HasForeignKey("Client_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.VDI.VDI", "VDI")
                        .WithMany()
                        .HasForeignKey("VDI_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("VDI");
                });

            modelBuilder.Entity("Team04_API.Models.VDI.VDI", b =>
                {
                    b.HasOne("Team04_API.Models.VDI.VDI_Type", "VDI_Type")
                        .WithMany("VDIs")
                        .HasForeignKey("VDI_Type_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("VDI_Type");
                });

            modelBuilder.Entity("Team04_API.Models.VDI.VDI_Request", b =>
                {
                    b.HasOne("Team04_API.Models.Users.User", "Client")
                        .WithMany()
                        .HasForeignKey("Client_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Team04_API.Models.VDI.VDI", "VDI")
                        .WithMany()
                        .HasForeignKey("VDI_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("VDI");
                });

            modelBuilder.Entity("Team04_API.Models.Chatbot.Chatbot_Log", b =>
                {
                    b.Navigation("Client_Feedback");
                });

            modelBuilder.Entity("Team04_API.Models.Company.Company", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Team04_API.Models.FAQ.FAQ_Category", b =>
                {
                    b.Navigation("FAQs");
                });

            modelBuilder.Entity("Team04_API.Models.Location.Country", b =>
                {
                    b.Navigation("states");
                });

            modelBuilder.Entity("Team04_API.Models.Location.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Team04_API.Models.Report.Report_Interval", b =>
                {
                    b.Navigation("EmployeeReports");
                });

            modelBuilder.Entity("Team04_API.Models.Report.Report_Type", b =>
                {
                    b.Navigation("EmployeeReports");
                });

            modelBuilder.Entity("Team04_API.Models.Software.Software", b =>
                {
                    b.Navigation("Software_Requests");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.Anomaly", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Team04_API.Models.Ticket.Ticket", b =>
                {
                    b.Navigation("Chatbot_Log");

                    b.Navigation("ClientFeedback");

                    b.Navigation("Ticket_Escalation");

                    b.Navigation("Ticket_Updates");

                    b.Navigation("ToDoListItems");

                    b.Navigation("ToDoLists");
                });

            modelBuilder.Entity("Team04_API.Models.Users.Credential", b =>
                {
                    b.Navigation("uOTP");
                });

            modelBuilder.Entity("Team04_API.Models.Users.Language", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Team04_API.Models.Users.Login_Status", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Team04_API.Models.Users.Title", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Team04_API.Models.Users.User", b =>
                {
                    b.Navigation("Credential");

                    b.Navigation("EmployeeReports");

                    b.Navigation("FAQs");
                });

            modelBuilder.Entity("Team04_API.Models.VDI.VDI_Type", b =>
                {
                    b.Navigation("VDIs");
                });
#pragma warning restore 612, 618
        }
    }
}
